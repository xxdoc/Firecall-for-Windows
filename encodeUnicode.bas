Attribute VB_Name = "Module1"


'------------------------------------------------------ STARTS
'API Functions to read/write information from INI File start
Private Declare Function GetPrivateProfileString Lib "kernel32" _
    Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any _
    , ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long _
    , ByVal lpFileName As String) As Long
Private Declare Function WritePrivateProfileString Lib "kernel32" _
    Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any _
    , ByVal lpString As Any, ByVal lpFileName As String) As Long
'------------------------------------------------------ ENDS

    Private Const EscapeChar As String = "#"

    Public Sub WritePrivateProfileStringUnicode(ApplicationName As String, KeyName As String, value As String, FileName As String)
        Dim ValueUnicode As String
        ValueUnicode = EncodeUnicodeString(value)
        
    Dim aLength As Long
    
    aLength = WritePrivateProfileString(ApplicationName, KeyName, ValueUnicode, FileName)
        
    End Sub

Public Function GetPrivateProfileStringUnicode(ApplicationName As String, KeyName As String, FileName As String) As String
        'Dim sb As New StringBuilder(500)
    Const sb As Integer = 500  ' maximum no of characters allowed in the returned string
    Dim sReturn As String * sb
    Dim sDefault As String * sb
    Dim lLength As Long
    
    ' we no longer use GetPrivateProfileString for reading all the vars as it cannot read certain special chars in the values
    ' the sort that might be generated by such things as the encryption routine.

    lLength = GetPrivateProfileString(ApplicationName, KeyName, "", sReturn, sb, FileName)
        
    GetPrivateProfileStringUnicode = DecodeUnicodeString(Str$(sb))
End Function

    Public Function EncodeUnicodeString(value As String) As String
        'First escape the escape character
        Dim NewValue As String
        
        NewValue = Replace(value, EscapeChar, EscapeChar & Asc(EscapeChar) & EscapeChar)
        If IsUnicode(NewValue) Then
            'Value has unicode characters; we convert them to an integer value preceeded and followed by the escape character
            Dim i As Integer
            Dim ValueUnicode As String
            
            ValueUnicode = ""
            For i = 1 To Len(NewValue)
                Dim strChar As String
                strChar = Mid(NewValue, i, 1)
                If AscW(strChar) > 255 Or AscW(strChar) < 0 Then
                    strChar = EscapeChar & AscW(strChar) & EscapeChar
                End If
                ValueUnicode = ValueUnicode & strChar
            Next
            'Return encoded string
            EncodeUnicodeString = ValueUnicode
        Else
            'Return unencoded string
            EncodeUnicodeString = NewValue
        End If
    End Function

    Public Function DecodeUnicodeString(value As String) As String
        If InStr(value, EscapeChar) = 0 Then
            'No #-character found, so there is nothing decode
            DecodeUnicodeString = value
        Else
            Dim i As Integer
            'Dim Parts() As String = Split(Value, EscapeChar) 'Split value to array
            
            Dim Parts() As String
            ReDim Parts(Len(value) - 1)
            For i = 1 To Len(value)
                Parts(i - 1) = Mid$(value, i, 1)
            Next

            
            For i = 1 To UBound(Parts) Step 2         'If i is an odd number Parts(i) always contains a integer which should be converted back
                Parts(i) = Trim(ChrW(CInt(Parts(i))))
            Next
            DecodeUnicodeString = Join(Parts, "")                   'Return the joined array Parts
        End If
    End Function

    Private Function IsUnicode(arse As String) As Boolean
        Dim asciiBytesCount = Encoding.ASCII.GetByteCount(arse)
        Dim unicodBytesCount = Encoding.UTF8.GetByteCount(arse)
        DecodeUnicodeString(asciiBytesCount <> unicodBytesCount
    End Function


